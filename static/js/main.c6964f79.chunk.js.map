{"version":3,"sources":["components/NavBar.js","components/Movie.js","components/MovieList.js","components/Pagination.js","components/SimilarMovie.js","components/SimilarMovieList.js","components/MovieInfo.js","components/App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","Movie","props","image","src","alt","style","height","onClick","viewMovieInfo","movieId","getSimilarMovies","MovieList","movies","map","movie","i","id","key","poster_path","Pagination","currentPage","nextPage","SimilarMovie","padding","title","SimilarMovieList","similarMovies","similarMovie","MovieInfo","closeMovieInfo","cursor","paddingTop","marginLeft","currentMovie","width","release_date","overview","original_language","popularity","movieApi","axios","create","baseURL","headers","Accept","App","getPopularMovies","a","async","get","apiKey","response","setState","data","results","filteredMovie","state","filter","newCurrentMovie","length","pageNumber","page","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c6964f79.chunk.js","sourcesContent":["import React from 'react';\n\nconst NavBar = () => {\n    return (\n        <nav>                                                                                                                                                                                                       \n            <div className=\"nav-wrapper black \">\n                <a href=\"#\" className=\"brand-logo\">__TheMovieDB</a>\n            </div>\n        </nav>\n    )\n}\n\nexport default NavBar;","import React from 'react'\n\nconst Movie = (props) => {\n    return (\n        <div className=\"col s12 m6 l3\">\n            <div className=\"card\">\n                <div className=\"card-image waves-effect\">\n                    {\n                        props.image != null \n                        ? <img src={`https://image.tmdb.org/t/p/w185${props.image}`} alt=\"Movie image\" style={{height: 300}}></img> \n                        : <img src={`https://ru.uoslab.com/images/tovary/no_image.jpg`} alt='Movie image'></img>\n                    }\n                </div>                             \n                <div className=\"card-content\">\n                    <p><a href=\"#\" onClick={() => {props.viewMovieInfo(props.movieId);  props.getSimilarMovies(props.movieId);}} >More info</a></p>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Movie","import React from 'react'\nimport Movie from './Movie'\n\nconst MovieList = (props) => {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col s12\">\n                    {\n                        props.movies.map((movie, i) => {\n                            return (\n                                <Movie viewMovieInfo={props.viewMovieInfo} getSimilarMovies={props.getSimilarMovies} movieId={movie.id} key={i} image={movie.poster_path}/>\n                            )\n                        })\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default MovieList;","import React from 'react'\n\nconst Pagination = (props) => {\n    return (\n        <div className=\"container\"> \n            <div className='row'>\n                {\n                    props.currentPage > 1 \n                    ? <a href=\"#!\" onClick={() => props.nextPage(props.currentPage - 1) }><i className=\"material-icons\">navigate_before</i></a>\n                    : \"\"\n                }\n                <a href=\"#!\" onClick={() => props.nextPage(props.currentPage + 1) }><i className=\"material-icons\">navigate_next</i></a>  \n            </div>\n        </div>   \n    )\n}\n\nexport default Pagination","import React from 'react'\n\nconst SimilarMovie = (props) => {\n    return (\n        <div className=\"col s12 m6 l3\">\n            <div className=\"card\">\n                <div className=\"card-image waves-effect\">\n                    {\n                        props.image != null \n                        ? <img src={`https://image.tmdb.org/t/p/w185${props.image}`} alt=\"Movie image\"></img> \n                        : <img src={`https://ru.uoslab.com/images/tovary/no_image.jpg`} alt='Movie image'></img>\n                    }\n                </div>\n                <div className=\"card-content\" style={{height: 70, padding: 5}}>\n                    {props.title}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default SimilarMovie\n","import React from 'react'\nimport SimilarMovie from './SimilarMovie'\n\nconst SimilarMovieList = (props) => {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col s12\">\n                    {\n                       props.similarMovies.map((similarMovie, i) => {\n                        return (\n                            <SimilarMovie key={i} movieId={similarMovie.id} image={similarMovie.poster_path} title={similarMovie.title}/>\n                        )\n                       })\n                    }\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default  SimilarMovieList;","import React from 'react'\nimport SimilarMovieList from './SimilarMovieList'\n\n\nconst MovieInfo = (props) => {\n    return (\n        <div className=\"container\">\n            <div className=\"row\" onClick={props.closeMovieInfo} style={{cursor: \"pointer\", paddingTop: 50}}>\n                <i className=\"material-icons\">navigate_before</i>\n                <span style={{marginLeft: 10}}>Go back</span>\n            </div>\n            <div className=\"row\">\n                <div className='col s12 m4'>\n                    {                 \n                        props.currentMovie.poster_path != null \n                        ? <img src={`https://image.tmdb.org/t/p/w185${props.currentMovie.poster_path}`} alt=\"Movie image\" style={{width: \"90%\"}}></img> \n                        : <img src={`https://ru.uoslab.com/images/tovary/no_image.jpg`} alt='Movie image'></img>    \n                    }\n                </div>\n                <div className='col s12 m8'>\n                    <div className='info-container'>\n                    <h4><p>{props.currentMovie.title}</p></h4>\n                        <p><b>Release date:</b> {props.currentMovie.release_date}</p>\n                        <p>{props.currentMovie.overview}</p>\n                        <p><b>Original language: </b>{props.currentMovie.original_language}</p>\n                        <p><b>Popularity: </b>{props.currentMovie.popularity}</p>\n                    </div>\n                </div>\n            </div>\n            <div className=\"row\">\n                <h4><p>Similar movies</p></h4>\n            </div>\n            <div >\n                <SimilarMovieList  similarMovies={props.similarMovies}/>\n            </div>\n        </div>\n        \n    )\n}\n\n\nexport default MovieInfo","import React from 'react';\nimport NavBar from './NavBar'\nimport MovieList from './MovieList'\nimport Pagination from './Pagination'\nimport MovieInfo from './MovieInfo'\nimport axios from 'axios';\nimport { async } from 'q';\n\nconst movieApi = axios.create({\n  baseURL: \"https://api.themoviedb.org/3/\",\n  headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n  }\n});\n\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      movies: [],\n      currentPage: 1,\n      currentMovie: null,\n      similarMovies: []\n    };\n    this.apiKey = 'fbdf8f0bc6851ffc975c8254d9dbc7fa';\n    this.getPopularMovies();\n  }\n\n  getPopularMovies = async () => {\n    const response = await movieApi.get(`/movie/popular?api_key=${this.apiKey}&language=en-US&page=1`); \n    this.setState({\n      movies: [...response.data.results]\n    }n  }\n\n  getSimilarMovies = async (id) => {\n    const response = await movieApi.get(`/movie/${id}/similar?api_key=${this.apiKey}&language=en-US&page=1`);\n    this.setState({\n      similarMovies: [...response.data.results]\n    });\n  }\n\n  viewMovieInfo = (id) => {\n    const filteredMovie = this.state.movies.filter(movie => movie.id === id);\n    const newCurrentMovie = filteredMovie.length > 0 ? filteredMovie[0] : null;\n    this.setState({\n      currentMovie: newCurrentMovie\n    })\n  }\n\n  closeMovieInfo = () => {\n    this.setState({\n      currentMovie: null\n    })\n  }\n\n  nextPage = async(pageNumber) => {\n    const response = await movieApi.get(`/movie/popular?api_key=${this.apiKey}&language=en-US&page=${pageNumber}`);\n    this.setState({\n      movies: [...response.data.results],\n      currentPage: response.data.page\n    });\n  }\n\n  render() {  \n    return (\n    <div className=\"App\">\n     <NavBar />\n     {\n       this.state.currentMovie == null \n       ? <div>\n         <MovieList movies={this.state.movies} viewMovieInfo={this.viewMovieInfo} getSimilarMovies={this.getSimilarMovies}/>\n         <Pagination currentPage={this.state.currentPage} nextPage={this.nextPage}/> \n        </div>\n       : <div>\n            <MovieInfo currentMovie={this.state.currentMovie} similarMovies={this.state.similarMovies} closeMovieInfo={this.closeMovieInfo}/> \n          </div>\n     }  \n    </div>\n    )\n  }\n}\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}